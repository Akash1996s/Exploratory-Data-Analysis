> ## hierarchical clustering
> set.seed(1234)
> par(mar=c(0,0,0,0))
> x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
> y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
> plot(x,y,col="blue",pch=19,cex=2)
> text(x+0.05,y+0.05,labels=as.character(1:12))
> ## calculating distance
> dataFrame <- data.frame(x=x,y=y)
> dist(dataFrame)
            1          2          3          4          5          6          7
2  0.34120511                                                                  
3  0.57493739 0.24102750                                                       
4  0.26381786 0.52578819 0.71861759                                            
5  1.69424700 1.35818182 1.11952883 1.80666768                                 
6  1.65812902 1.31960442 1.08338841 1.78081321 0.08150268                      
7  1.49823399 1.16620981 0.92568723 1.60131659 0.21110433 0.21666557           
8  1.99149025 1.69093111 1.45648906 2.02849490 0.61704200 0.69791931 0.65062566
9  2.13629539 1.83167669 1.67835968 2.35675598 1.18349654 1.11500116 1.28582631
10 2.06419586 1.76999236 1.63109790 2.29239480 1.23847877 1.16550201 1.32063059
11 2.14702468 1.85183204 1.71074417 2.37461984 1.28153948 1.21077373 1.37369662
12 2.05664233 1.74662555 1.58658782 2.27232243 1.07700974 1.00777231 1.17740375
            8          9         10         11
2                                             
3                                             
4                                             
5                                             
6                                             
7                                             
8                                             
9  1.76460709                                 
10 1.83517785 0.14090406                      
11 1.86999431 0.11624471 0.08317570           
12 1.66223814 0.10848966 0.19128645 0.20802789

> ## cluster
> dataFrame <- data.frame(x=x,y=y)
> distxy <- dist(dataFrame)
> hClustering <- hclust(distxy)
> plot(hClustering)

> # pretty
> myplclust <- function(hclust,lab=hclust$labels,lab.col=rep(1,length(hclust$labels)),hang=0.1,...) {
+ y <- rep(hclust$height,2)
+ x <- as.numeric(hclust$merge)
+ y <- y[which(x<0)]
+ x <- x[which(x<0)]
+ x <- abs(x)
+ y <- y[order(x)]
+ x <- x[order(x)]
+ plot(hclust,labels=FALSE,hang=hang,...)
+ text(x=x,y=y[hclust$order]-(max(hclust$height)*hang),labels=lab[hclust$order],col=lab.col[hclust$order],srt=90,adj=c(1,0.5),xpd=NA,...)
+ }
> dataFrame <- data.frame(x=x,y=y)
> distxy <- dist(dataFrame)
> hClustering <- hclust(distxy)
> myplclust(hClustering,lab=rep(1:3,each=4),lab.col=rep(1:3,each=4))

> ## heatmap
> dataFrame <- data.frame(x=x,y=y)
> set.seed(143)
> dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
> heatmap(dataMatrix)

> ## K-means clustering
> set.seed(1234)
> par(mar=c(0,0,0,0))
> x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
> y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
> plot(x,y,col="blue",pch=19,cex=2)
> text(x+0.05,y+0.05,labels=as.character(1:12))
> #####
> dataFrame <- data.frame(x,y)
> kmeansObj <- kmeans(dataFrame,centers=3)
> names(kmeansObj)
[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss"
[6] "betweenss"    "size"         "iter"         "ifault"      
> kmeansObj$cluster
 [1] 3 3 3 3 1 1 1 1 2 2 2 2
> #####
> par(mar=rep(0.2,4))
> plot(x,y,col=kmeansObj$cluster,pch=19,cex=2)
> points(kmeansObj$centers,col=1:3,pch=3,cex=3,lwd=3)
> ## heatmaps
> set.seed(1234)
> dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
> kmeansObj2 <- kmeans(dataMatrix,centers=3)
> par(mfrow=c(1,2),mar=c(2,4,0.1,0.1))
> image(t(dataMatrix)[,nrow(dataMatrix):1],yaxt="n")
> image(t(dataMatrix)[,order(kmeansObj$cluster)],yaxt="n")

> ## data matrix
> set.seed(12345)
> par(mar=rep(0.2,4))
> dataMatrix <- matrix(rnorm(400),nrow=40)
> image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
> ## clustering the data
> par(mar=rep(0.2,4))
> heatmap(dataMatrix)
> ## pattern
> set.seed(678910)
> for(i in 1:40){
+ # flip a coin (^_^)
+ coinFlip <- rbinom(1,size=1,prob=0.5)
+ # if coin is heads = add a common pattern to that row
+ if(coinFlip){
+ dataMatrix[i,] <- dataMatrix[i,]+rep(c(0,3),each=5)
+ }
+ }
> par(mar=rep(0.2,4))
> image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
> # clustered data
> par(mar=rep(0.2,4))
> heatmap(dataMatrix)
> ## patterns in rows and columns
> hh <- hclust(dist(dataMatrix))
> dataMatrixOrdered <- dataMatrix[hh$order,]
> par(mfrow=c(1,3))
> image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
> plot(rowMeans(dataMatrixOrdered),40:1,,xlab="Row Mean",ylab="Row",pch=19)
> plot(colMeans(dataMatrixOrdered),xlab="Column",ylab="Column Means",pch=19)

> ## components of the SVD -> u and v
> svd1 <- svd(scale(dataMatrixOrdered))
> par(mfrow=c(1,3))
> image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
> plot(svd1$u[,1],40:1,,xlab="Row",ylab="First left singular vector",pch=19)
> plot(svd1$v[,1],xlab="Column",ylab="First right singular vector",pch=19)
> ## components of the SVD -> variance
> par(mfrow=c(1,2))
> plot(svd1$d,xlab="Column",ylab="Singular value",pch=19)
> plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Prop. of variance explained",pch=19)
> ## relationship to principal components
> svd1 <- svd(scale(dataMatrixOrdered))
> pcal <- prcomp(dataMatrixOrdered,scale=TRUE)
> plot(pcal$rotation[,1],svd1$v[,1],pch=19,xlab="Principal Component 1",ylab="Right Singular Vector 1")
> abline(c(0,1))
> ## svd -> variance
> constantMatrix <- dataMatrixOrdered*0
> for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
> svd1 <- svd(constantMatrix)
> par(mfrow=c(1,3))
> image(t(constantMatrix)[,nrow(constantMatrix):1])
> plot(svd1$d,xlab="Column",ylab="Singular value",pch=19)
> plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Prop. of variance explained",pch=19)
> ## second pattern
> set.seed(678910)
> for(i in 1:40){
+ # flip a cin
+ coinFlip1 <- rbinom(1,size=1,prob=0.5)
+ coinFlip2 <- rbinom(1,size=1,prob=0.5)
+ # if coin is heads => add a common pattern to that row
+ if(coinFlip1){
+ dataMatrix[i,] <- dataMatrix[i,]+rep(c(0,5),each=5)
+ }
+ if(coinFlip2){
+ dataMatrix[i,] <- dataMatrix[i,]+rep(c(0,5),5)
+ }
+ }
> hh <- hclust(dist(dataMatrix))
> dataMatrixOrdered <- dataMatrix[hh$order]
> ## singular value decomposition -> true patterns
> svd2 <- svd(scale(dataMatrixOrdered))
> par(mfrow=c(1,3))
> image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
Error in nrow(dataMatrixOrdered):1 : argument of length 0
> plot(rep(c(0,1),each=5),pch=19,xlab="Column",ylab="Pattern 1")
> plot(rep(c(0,1),5),pch=19,xlab="Column",ylab="Pattern 2")
