> ## reading data
> ig <- read.csv("Digital_Universe_Atlas.csv",colClasses=c("numeric","character","factor","numeric","numeric"))
> head(ig)
  ID   Label            X         Y           Z
1  1     WLM    71746.888  284986.3 -1000684.27
2  2   IC 10 -623009.4693 1125201.4   -74901.41
3  3  Cet dw  -50107.1145  248445.3  -820649.76
4  4 NGC 147 -354813.4467  619093.2  -181151.85
5  5 And III -390953.4681  695532.4  -393352.12
6  6 NGC 185 -353760.0603  553112.8   258225.83
  Distance..light.years. created_at updated_at
1                3400000    07:57.3    07:57.3
2                4200000    07:57.3    07:57.3
3                2800000    07:57.3    07:57.3
4                2400000    07:57.3    07:57.3
5                2900000    07:57.3    07:57.3
6                2300000    07:57.3    07:57.3

> ## five number summary
> summary(ig$Distance..light.years)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  25000  825000 2900000 2519000 3100000 7900000
> summary(ig$pm25)
Length  Class   Mode 
     0   NULL   NULL
> ##boxplot
> boxplot(ig$Distance..light.years,col="red")
> ## histogram
> hist(ig$Distance..light.years,col="blue")
> rug(ig$Distance..light.years)
> hist(ig$Distance..light.years,col="blue",breaks=100)
> rug(ig$Distance..light.years)
> ## overlaying features
> boxplot(ig$Distance..light.years,col="green")
> abline(h=12)
> ## overlaying features in histogram
> hist(ig$Distance..light.years,col="pink")
> abline(v=12,lwd=2)
> abline(v=median(ig$Distance..light.years),col="blue",lwd=4)
> ## barplot
> barplot(table(ig$Distance..light.years),col="wheat", main="light years distance")

> ## multiple boxplots
> ig_ig <- read.csv("./exp-data/avgpm25.csv",colClasses=c("numeric","character","factor","numeric","numeric"))
> ## plotting multiple boxplots
> boxplot(pm25 ~ region, data=ig_ig,col="red")
> ## multiple histograms
> par(mfrow=c(2,1),mar=c(4,4,2,1))
> hist(subset(ig_ig,region=="east")$pm25,col="green")
> hist(subset(ig_ig,region=="west")$pm25,col="blue")
> ## scatterrplot
> with(ig_ig,plot(latitude,pm25))
> abline(h=12,lwd=2,lty=2)
> ## scatterplot -- using color
> with(ig_ig,plot(latitude,pm25,col=region))
> abline(h=12,lwd=2,lty=2)
> ## multiple scatterplots
> par(mfrow=c(1,2),mar=c(5,4,2,1))
> with(subset(ig_ig,region=="west"),plot(latitude,pm25,main="West"))
> with(subset(ig_ig,region=="east"),plot(latitude,pm25,main="East"))

> ## base plot
> library(datasets)
> data(cars)
> with(cars,plot(speed,dist))
> ## lattice thingy => xyplot, bwplot
> ## lattice plot
> library(lattice)
> state <- data.frame(state.x77,region=state.region)
> xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
> ## ggplot2
trying URL 'http://cran.rstudio.com/bin/windows/contrib/3.1/ggplot2_1.0.1.zip'
Content type 'application/zip' length 2676917 bytes (2.6 MB)
opened URL
downloaded 2.6 MB

package ‘ggplot2’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\dell\AppData\Local\Temp\Rtmpcf1eQL\downloaded_packages

> library(ggplot2)
> data(mpg)
> qplot(displ,hwy,data=mpg)

## simple base graphics
## histogram
> library(datasets)
> hist(airquality$Ozone)
## scatterplot
> library(datasets)
> with(airquality,plot(Wind,Ozone))
## boxplot
> library(datasets)
> airquality <- transform(airquality,Month=factor(Month))
> boxplot(Ozone ~ Month,airquality,xlab="Month",ylab="Ozone")
## base graphics parameters
> par("lty")
[1] "solid"
> par("col")
[1] "black"
> par("pch")
[1] 1
> par("bg")
[1] "white"
> par("mar")
[1] 5 4 2 1
> par("mfrow")
[1] 1 2
## base plot with annotation
> library(datasets)
> with(airquality,plot(Wind,Ozone))
> title(main="Ozone and Wind in New York City")
> ## scatterplot
> with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City"))
> with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
## doing more
> with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City",type="n"))
> with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
> with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
> legend("topright",pch=1,col=c("blue","red"),legend=c("May","Other Months"))
> ## Base plot with regression line
> with(airquality,plot(Wind,Ozone,main="Ozone and Wind in New York City",pch=20))
> model <- lm(Ozone ~ Wind, airquality)
> abline(model,lwd=2)
> ## multiple base plots
> par(mfrow=c(1,2))
> with(airquality,{
+ plot(Wind,Ozone,main="Ozone and Wind")
+ plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
+ })
> ## multiple base plots
> par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
> with(airquality,{
+ plot(Wind,Ozone,main="Ozone and Wind")
+ plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
+ plot(Temp,Ozone,main="Ozone and Temperature")
+ mtext("Ozone and Weather in New York City",outer=TRUE)
+ })

## base plotting demo
> ig <- rnorm(100)
> hist(ig)
> meow <- rnorm(100)
> plot(ig,meow)
> ig_ig <- rnorm(100)
> plot(ig,ig_ig)
> plot(ig,meow)
> par(mar=c(2,2,2,2))
> plot(ig,meow)
> par(mar=c(4,4,2,2))
> plot(ig,meow)
> plot(ig,meow,pch=20)
> plot(ig,meow,pch=19)
> plot(ig,meow,pch=2)
> plot(ig,meow,pch=3)
> plot(ig,meow,pch=4)
> example(points)

points> require(stats) # for rnorm

points> plot(-4:4, -4:4, type = "n")  # setting up coord. system
Hit <Return> to see next plot: 

points> points(rnorm(200), rnorm(200), col = "red")

points> points(rnorm(100)/2, rnorm(100)/2, col = "blue", cex = 1.5)

points> op <- par(bg = "light blue")

points> x <- seq(0, 2*pi, len = 51)

points> ## something "between type='b' and type='o'":
points> plot(x, sin(x), type = "o", pch = 21, bg = par("bg"), col = "blue", cex = .6,
points+  main = 'plot(..., type="o", pch=21, bg=par("bg"))')

points> par(op)

points> ## Not run: 
points> ##D ## The figure was produced by calls like
points> ##D png("pch.png", height = 0.7, width = 7, res = 100, units = "in")
points> ##D par(mar = rep(0,4))
points> ##D plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
points> ##D text(0:25, 0.6, 0:25, cex = 0.5)
points> ##D points(0:25, rep(0.3, 26), pch = 0:25, bg = "grey")
points> ## End(Not run)
points> 
points> ##-------- Showing all the extra & some char graphics symbols ---------
points> pchShow <-
points+   function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
points+            cex = 3, ## good for both .Device=="postscript" and "x11"
points+            col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,
points+            main = paste("plot symbols :  points (...  pch = *, cex =",
points+                         cex,")"))
points+   {
points+     nex <- length(extras)
points+     np  <- 26 + nex
points+     ipch <- 0:(np-1)
points+     k <- floor(sqrt(np))
points+     dd <- c(-1,1)/2
points+     rx <- dd + range(ix <- ipch %/% k)
points+     ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)
points+     pch <- as.list(ipch) # list with integers & strings
points+     if(nex > 0) pch[26+ 1:nex] <- as.list(extras)
points+     plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)
points+     abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
points+     for(i in 1:np) {
points+       pc <- pch[[i]]
points+       ## 'col' symbols with a 'bg'-colored interior (where available) :
points+       points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)
points+       if(cextext > 0)
points+           text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)
points+     }
points+   }

points> pchShow()

points> pchShow(c("o","O","0"), cex = 2.5)
Hit <Return> to see next plot: 

points> pchShow(NULL, cex = 4, cextext = 0, main = NULL)

points> ## No test: 
points> ## ------------ test code for various pch specifications -------------
points> # Try this in various font families (including Hershey)
points> # and locales.  Use sign = -1 asserts we want Latin-1.
points> # Standard cases in a MBCS locale will not plot the top half.
points> TestChars <- function(sign = 1, font = 1, ...)
points+ {
points+    MB <- l10n_info()$MBCS
points+    r <- if(font == 5) { sign <- 1; c(32:126, 160:254)
points+        } else if(MB) 32:126 else 32:255
points+    if (sign == -1) r <- c(32:126, 160:255)
points+    par(pty = "s")
points+    plot(c(-1,16), c(-1,16), type = "n", xlab = "", ylab = "",
points+         xaxs = "i", yaxs = "i",
points+         main = sprintf("sign = %d, font = %d", sign, font))
points+    grid(17, 17, lty = 1) ; mtext(paste("MBCS:", MB))
points+    for(i in r) try(points(i%%16, i%/%16, pch = sign*i, font = font,...))
points+ }

points> TestChars()

points> try(TestChars(sign = -1))
Hit <Return> to see next plot: 
## press <Esc> to exit
> ig <- rnorm(100); meow <- rnorm(100)
> plot(ig,meow,pch=20)
> title("scatterplot")
> text(-2,-2,"IG <3 <3")
> legend("topleft",legend="Data")
> legend("topleft",legend="Data",pch=20)
> fit <- lm(meow ~ ig)
> abline(fit)
> abline(fit,lwd=3)
> abline(fit,lwd=3,col="blue")
> plot(ig,meow,xlab="Weight",ylab="Height",main="Scatterplot",pch=20)
> legend("topright",legend="Data",pch=20)
> fit <- lm(meow ~ ig)
> abline(fit,lwd=3,col="red")
> ig_ig_ig <- rpois(100,2)
> par(mfrow=c(2,1))
> plot(ig,meow,pch=20)
Error in plot.new() : figure margins too large
> plot(ig,ig_ig_ig,pch=19)
Error in plot.new() : figure margins too large
> ## adjusting margins
> par("mar")
[1] 4 4 2 2
> par(mar=c(2,2,1,1))
> plot(ig,meow,pch=20)
> plot(ig,ig_ig_ig,pch=19)
> par(mfrow=c(1,2))
> plot(ig,meow,pch=20)
> plot(ig,ig_ig_ig,pch=20)
> par(mar=c(4,4,2,2))
> plot(ig,meow,pch=20)
> plot(ig,ig_ig_ig,pch=20)
> par(mfrow=c(2,2))
> plot(ig,meow)
> plot(ig,ig_ig_ig)
> plot(ig_ig_ig,ig)
> plot(meow,ig)
> par(mfcol=c(2,2))
> plot(ig,meow)
> plot(ig,ig_ig_ig)
> plot(ig_ig_ig,ig)
> plot(meow,ig)
> par(mfrow=c(1,1))
> ig <- rnorm(100)
> meow <- ig+rnorm(100)
> ig_group <- gl(2,50)
> ig_group <- gl(2,50,labels=c("male","female"))
> str(ig_group)
 Factor w/ 2 levels "male","female": 1 1 1 1 1 1 1 1 1 1 ...
> plot(ig,meow)
> plot(ig,meow,type="n")
> ## data is missing
> ## let's add the data
> points(ig[ig_group=="male"],meow[ig_group=="male"],col="green")
> points(ig[ig_group=="female"],meow[ig_group=="female"],col="pink")
> points(ig[ig_group=="female"],meow[ig_group=="female"],col="pink",pch=19)

> ## graphics devices in R
> library(datasets)
> with(faithful,plot(eruptions,waiting)) ## make plot appear on screen device
> title(main="Old Faithful Geyser data")
> pdf(file="./exp-data/myplot.pdf")
> with(faithful,plot(eruptions,waiting))
> title(main="Old Faithful Geyser Data")
> dev.off()
RStudioGD 
        2 
